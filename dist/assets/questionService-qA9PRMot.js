import{l as e,b as s,s as o}from"./index-gsW8jZzM.js";async function t({categoryId:e="mixed",questionCount:s=10,difficulty:t=null}){let r=o.from("questions").select("*").eq("is_active",!0);e&&"mixed"!==e&&(r=r.contains("question_tags",[{id:e}])),t&&(r=r.eq("difficulty",t)),r=r.limit(s);const i=performance.now(),{data:n,error:u}=await r,a=performance.now()-i;if(u)throw console.error("‚ùå [QuizService] Error fetching questions:",{message:u.message,details:u.details,categoryId:e,questionCount:s,difficulty:t,duration:`${a.toFixed(2)}ms`}),new Error(`FETCH_QUESTIONS_ERROR: ${u.message}`);return console.log("‚úÖ [QuizService] Successfully fetched questions:",{count:n.length,categoryId:e,difficulty:t,duration:`${a.toFixed(2)}ms`}),n}async function r({userId:r,categoryId:i="mixed",questionCount:n=10,difficulty:u=null}){return e.setContext({userId:r,operation:"fetchQuestionsForUser"}),r?(e.info("Starting smart question fetch for user (using RPC)",{userId:r,categoryId:i,questionCount:n,difficulty:u}),await s("fetchQuestionsForUser",async()=>{try{const{data:s,error:a}=await o.rpc("get_unseen_questions",{p_user_id:r,p_category_id:"mixed"===i?null:i,p_difficulty:u,p_limit:2*n});if(a)return e.error("Error fetching unseen questions via RPC",{error:a}),e.warn("Falling back to basic fetch due to RPC error",{error:a.message}),console.error("[RPC ERROR] get_unseen_questions:",a),t({categoryId:i,questionCount:n,difficulty:u});if(e.info("Fetched unseen questions via RPC",{count:s?.length,data:s}),console.log("[RPC DATA] get_unseen_questions:",s),s&&s.length>=n){const o=function(e){let s,o=e.length;for(;o>0;)s=Math.floor(Math.random()*o),o--,[e[o],e[s]]=[e[s],e[o]];return e}([...s]);return e.info("Using unseen questions for user (RPC)",{userId:r,selectedCount:n,totalAvailable:s.length}),o.slice(0,n)}return e.warn("Not enough unseen questions from RPC, using fallback",{userId:r,available:s?.length||0,requested:n}),t({categoryId:i,questionCount:n,difficulty:u})}catch(s){return e.error("Error in fetchQuestionsForUser (RPC)",{error:s}),t({categoryId:i,questionCount:n,difficulty:u})}})):(e.warn("No userId provided, falling back to basic fetchQuestions",{categoryId:i,questionCount:n,difficulty:u}),t({categoryId:i,questionCount:n,difficulty:u}))}async function i({userId:e,sessionType:s="timed",totalQuestions:t,categoryName:r=null,timePerQuestion:i=60,totalTimeLimit:n=null,autoAdvance:u=!0,showExplanations:a=!1,settings:c={}}){let d=s;d="timed_test"===s||"timed"===s?"timed":"custom"===s||"self_paced"===s?"self_paced":"quick"===s||"blitz"===s?"timed":"learn_module"===s?"learn_module":"self_paced";const l={user_id:e,session_type:d,total_questions:t};console.log("üîç [QuizService] Creating quiz session with payload:",JSON.stringify(l,null,2)),console.log("‚ÑπÔ∏è [QuizService] Mapped session_type from",s,"to",d);const f=performance.now(),{data:g,error:m}=await o.from("quiz_sessions").insert(l).select().single(),_=performance.now()-f;if(m)throw console.error("‚ùå [QuizService] Error creating quiz session:",{message:m.message,details:m.details,userId:e,sessionType:d,duration:`${_.toFixed(2)}ms`}),new Error(`SESSION_CREATION_ERROR: ${m.message}`);return console.log("‚úÖ [QuizService] Successfully created quiz session:",{sessionId:g.id,userId:e,sessionType:d,duration:`${_.toFixed(2)}ms`}),g}async function n(e,s){if(!s||!s.questionId)return console.error("‚ùå [QuizService] recordQuizResponse: questionId is undefined! answerData:",s),{error:"Missing questionId in answerData."};const t=performance.now(),{data:r,error:i}=await o.from("quiz_responses").insert({session_id:e,question_id:s.questionId,selected_option_id:s.selectedOptionId,is_correct:s.isCorrect,time_spent_seconds:s.timeSpent,response_order:s.responseOrder}).select().single(),n=performance.now()-t;if(i)throw console.error("‚ùå [QuizService] Error recording quiz response:",{message:i.message,details:i.details,sessionId:e,questionId:s.questionId,duration:`${n.toFixed(2)}ms`}),new Error(`RESPONSE_RECORDING_ERROR: ${i.message}`);return console.log("‚úÖ [QuizService] Successfully recorded quiz response:",{sessionId:e,questionId:s.questionId,isCorrect:s.isCorrect,duration:`${n.toFixed(2)}ms`}),s.userId?await async function({userId:e,questionId:s,isCorrect:t}){const{error:r}=await o.rpc("record_question_interaction",{p_user_id:e,p_question_id:s,p_answered_correctly:t});r&&console.error("‚ùå [QuizService] Error recording question interaction:",r)}({userId:s.userId,questionId:s.questionId,isCorrect:s.isCorrect}):console.warn("‚ö†Ô∏è [QuizService] No userId provided for history update",{sessionId:e,questionId:s.questionId}),r}async function u(e){const s=performance.now(),{data:t,error:r}=await o.from("quiz_sessions").update({completed_at:(new Date).toISOString()}).eq("id",e).select().single(),i=performance.now()-s;if(r)throw console.error("‚ùå [QuizService] Error completing quiz session:",{message:r.message,details:r.details,sessionId:e,duration:`${i.toFixed(2)}ms`}),new Error(`SESSION_COMPLETION_ERROR: ${r.message}`);return console.log("‚úÖ [QuizService] Successfully completed quiz session:",{sessionId:e,duration:`${i.toFixed(2)}ms`}),t}async function a({userId:e,numBlocks:s,questionsPerBlock:t,totalQuestions:r,settings:i={}}){const n={user_id:e,session_type:"block",total_questions:r,settings:{...i,numBlocks:s,questionsPerBlock:t}},{data:u,error:a}=await o.from("quiz_sessions").insert(n).select().single();if(a)throw new Error(`BLOCK_SESSION_CREATION_ERROR: ${a.message}`);return u}async function c({userId:e,blockIndex:s,questionsPerBlock:o,difficulty:t=null}){return r({userId:e,categoryId:"mixed",questionCount:o,difficulty:t})}async function d(e,s,o){return n(e,{...s,blockIndex:o})}async function l(e,s){const{data:t,error:r}=await o.from("quiz_sessions").update({settings:s,paused_at:(new Date).toISOString()}).eq("id",e).select().single();if(r)throw new Error(`BLOCK_SESSION_PAUSE_ERROR: ${r.message}`);return t}async function f(e){const{data:s,error:t}=await o.from("quiz_sessions").update({paused_at:null}).eq("id",e).select().single();if(t)throw new Error(`BLOCK_SESSION_RESUME_ERROR: ${t.message}`);return s}async function g(e){return u(e)}export{u as a,a as b,i as c,c as d,g as e,r as f,f as g,d as h,l as p,n as r};
