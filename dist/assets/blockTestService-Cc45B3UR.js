import{l as e,s}from"./index-xzrd9Y61.js";import{r}from"./responseService-CzKTm3IW.js";async function o(r){const{userId:o,totalBlocks:t=2,questionsPerBlock:n=20,timePerBlock:i=1800,categories:a=[],difficulty:c=null,breakTime:l=300}=r;e.info("Creating Block Test session",{userId:o,totalBlocks:t,questionsPerBlock:n,timePerBlock:i,categories:a,difficulty:c,breakTime:l});const u={user_id:o,session_type:"block",total_questions:t*n,started_at:(new Date).toISOString(),settings:{totalBlocks:t,questionsPerBlock:n,timePerBlock:i,categories:a,difficulty:c,breakTime:l,currentBlock:1,isOnBreak:!1,blockStartTimes:[],blockEndTimes:[]}},{data:d,error:m}=await s.from("quiz_sessions").insert(u).select().single();if(m)throw e.error("Error creating Block Test session",{error:m,sessionData:u}),new Error(`CREATE_BLOCK_SESSION_ERROR: ${m.message}`);return e.success("Block Test session created successfully",{sessionId:d.id,totalBlocks:t,questionsPerBlock:n,totalQuestions:d.total_questions}),d}async function t(s){const{sessionId:o,blockNumber:t,questionId:n,selectedOptionId:i,isCorrect:a,timeSpent:c,responseOrder:l,userId:u}=s;e.info("Recording Block Test response",{sessionId:o,blockNumber:t,questionId:n,selectedOptionId:i,isCorrect:a,timeSpent:c,responseOrder:l,userId:u});const d={sessionId:o,questionId:n,selectedOptionId:i,isCorrect:a,timeSpent:c,responseOrder:l,userId:u,blockNumber:t};try{const s=await r(d);return e.success("Block Test response recorded successfully",{responseId:s.id,blockNumber:t,questionId:n,isCorrect:a}),s}catch(m){throw e.error("Error recording Block Test response",{error:m.message,blockResponseData:d}),m}}async function n(r,o){const{currentBlock:t,pauseReason:n="break",pauseStartTime:i=(new Date).toISOString()}=o;e.info("Pausing Block Test session",{sessionId:r,currentBlock:t,pauseReason:n,pauseStartTime:i});const{data:a,error:c}=await s.from("quiz_sessions").select("settings").eq("id",r).single();if(c)throw e.error("Error fetching session for pause",{error:c,sessionId:r}),new Error(`FETCH_SESSION_ERROR: ${c.message}`);const l={...a.settings,currentBlock:t,isOnBreak:!0,pauseStartTime:i,pauseReason:n},{data:u,error:d}=await s.from("quiz_sessions").update({settings:l}).eq("id",r).select().single();if(d)throw e.error("Error pausing Block Test session",{error:d,sessionId:r,pauseData:o}),new Error(`PAUSE_BLOCK_SESSION_ERROR: ${d.message}`);return e.success("Block Test session paused successfully",{sessionId:r,currentBlock:t,pauseReason:n}),u}async function i(r,o){const{resumeTime:t=(new Date).toISOString()}=o;e.info("Resuming Block Test session",{sessionId:r,resumeTime:t});const{data:n,error:i}=await s.from("quiz_sessions").select("settings").eq("id",r).single();if(i)throw e.error("Error fetching session for resume",{error:i,sessionId:r}),new Error(`FETCH_SESSION_ERROR: ${i.message}`);const a=n.settings.pauseStartTime,c=a?(new Date(t)-new Date(a))/1e3:0,l={...n.settings,isOnBreak:!1,resumeTime:t,breakDuration:c,totalBreakTime:(n.settings.totalBreakTime||0)+c,pauseStartTime:null,pauseReason:null},{data:u,error:d}=await s.from("quiz_sessions").update({settings:l}).eq("id",r).select().single();if(d)throw e.error("Error resuming Block Test session",{error:d,sessionId:r,resumeData:o}),new Error(`RESUME_BLOCK_SESSION_ERROR: ${d.message}`);return e.success("Block Test session resumed successfully",{sessionId:r,breakDuration:`${c}s`,totalBreakTime:`${l.totalBreakTime}s`}),u}async function a(r,o){const{correctAnswers:t,totalTimeSeconds:n,blockResults:i=[],pointsEarned:a=0}=o;e.info("Completing Block Test session",{sessionId:r,correctAnswers:t,totalTimeSeconds:n,blockResults:i.length,pointsEarned:a});const{data:c,error:l}=await s.from("quiz_sessions").select("settings").eq("id",r).single();if(l)throw e.error("Error fetching session for completion",{error:l,sessionId:r}),new Error(`FETCH_SESSION_ERROR: ${l.message}`);const u={...c.settings,blockResults:i,completedAt:(new Date).toISOString()},d={correct_answers:t,completed_at:(new Date).toISOString(),total_time_seconds:n,points_earned:a,is_completed:!0,settings:u},{data:m,error:k}=await s.from("quiz_sessions").update(d).eq("id",r).select().single();if(k)throw e.error("Error completing Block Test session",{error:k,sessionId:r,updateData:d}),new Error(`COMPLETE_BLOCK_SESSION_ERROR: ${k.message}`);return e.success("Block Test session completed successfully",{sessionId:m.id,correctAnswers:t,totalTimeSeconds:n,blocksCompleted:i.length,pointsEarned:a}),m}export{a,t as b,o as c,n as p,i as r};
