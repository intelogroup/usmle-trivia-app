import{s as e}from"./index-dRASpXwx.js";const t=async(t,r)=>{try{console.log(`Quiz completed for user ${t}, session ${r}`);const s=await(async t=>{try{const{data:r,error:s}=await e.from("quiz_sessions").select("*").eq("user_id",t).eq("status","completed");if(s)return console.error("Error fetching quiz sessions:",s),{success:!1,error:s};if(!r||0===r.length){const r={user_id:t,total_quizzes_completed:0,total_questions_answered:0,total_correct_answers:0,total_points_earned:0,total_time_spent_seconds:0,overall_accuracy:0,average_quiz_score:0,best_quiz_score:0,current_streak:0,longest_streak:0,last_quiz_date:null,streak_start_date:null,category_stats:{},difficulty_stats:{}},{data:s,error:a}=await e.from("user_stats").upsert(r,{onConflict:"user_id"}).select().single();return{success:!0,data:s}}const a={user_id:t,total_quizzes_completed:r.length,total_questions_answered:r.reduce((e,t)=>e+(t.total_questions||0),0),total_correct_answers:r.reduce((e,t)=>e+(t.correct_answers||0),0),total_points_earned:r.reduce((e,t)=>e+(t.score||0),0),total_time_spent_seconds:r.reduce((e,t)=>e+(t.time_spent_seconds||0),0),last_quiz_date:r[r.length-1]?.completed_at};a.overall_accuracy=a.total_questions_answered>0?Math.round(a.total_correct_answers/a.total_questions_answered*100):0,a.average_quiz_score=r.length>0?Math.round(a.total_points_earned/r.length):0,a.best_quiz_score=r.length>0?Math.max(...r.map(e=>e.score||0)):0;const o=r.filter(e=>e.completed_at).sort((e,t)=>new Date(t.completed_at)-new Date(e.completed_at));let n=0,c=0,_=null;if(o.length>0){n=1,c=1,_=o[0].completed_at;for(let e=1;e<o.length;e++){const t=new Date(o[e-1].completed_at),r=new Date(o[e].completed_at);if(!(Math.floor((t-r)/864e5)<=1))break;n++,c=Math.max(c,n)}}a.current_streak=n,a.longest_streak=c,a.streak_start_date=_,a.category_stats={},a.difficulty_stats={};const{data:l,error:i}=await e.from("user_stats").upsert(a,{onConflict:"user_id"}).select().single();if(i)return console.error("Error upserting user stats:",i),{success:!1,error:i};const{error:u}=await e.from("profiles").update({total_points:a.total_points_earned,current_streak:a.current_streak,best_streak:a.longest_streak,last_active_date:new Date(a.last_quiz_date).toISOString().split("T")[0],last_active_at:a.last_quiz_date}).eq("id",t);return u&&console.error("Error updating profile:",u),{success:!0,data:l}}catch(r){return console.error("Error in updateUserStats:",r),{success:!1,error:r}}})(t);return s.success?console.log("User stats updated successfully after quiz completion"):console.error("Failed to update user stats after quiz completion:",s.error),s}catch(s){return console.error("Error in onQuizCompleted:",s),{success:!1,error:s}}},r=async(t="all",r=50)=>{try{let s=e.from("profiles").select("\n        id,\n        display_name,\n        full_name,\n        avatar_url,\n        country_id,\n        grade_id,\n        total_points,\n        current_streak,\n        best_streak,\n        created_at,\n        user_stats (\n          total_quizzes_completed,\n          total_questions_answered,\n          total_correct_answers,\n          overall_accuracy,\n          average_quiz_score,\n          best_quiz_score,\n          last_quiz_date\n        )\n      ").not("display_name","is",null).order("total_points",{ascending:!1}).limit(r);if("all"!==t){const e=new Date;let r;switch(t){case"day":r=new Date(e.setHours(0,0,0,0));break;case"week":r=new Date(e.setDate(e.getDate()-7));break;case"month":r=new Date(e.setMonth(e.getMonth()-1))}r&&(s=s.gte("created_at",r.toISOString()))}const{data:a,error:o}=await s;return o?(console.error("Error fetching leaderboard data:",o),[]):a||[]}catch(s){return console.error("Error in getLeaderboardData:",s),[]}};export{r as g,t as o};
