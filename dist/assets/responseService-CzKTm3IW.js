import{l as e,s as r}from"./index-xzrd9Y61.js";async function s(s){const{sessionId:o,questionId:t,selectedOptionId:n,isCorrect:i,timeSpent:c,responseOrder:d,userId:u}=s;e.info("Recording quiz response",{sessionId:o,questionId:t,selectedOptionId:n,isCorrect:i,timeSpent:c,responseOrder:d,userId:u});try{const{data:a,error:p}=await r.from("quiz_responses").insert({session_id:o,question_id:t,selected_option_id:n,is_correct:i,time_spent_seconds:c,response_order:d}).select().single();if(p)throw e.error("Error recording quiz response",{error:p,responseData:s}),new Error(`RECORD_RESPONSE_ERROR: ${p.message}`);return u&&t&&async function({userId:s,questionId:o,answeredCorrectly:t}){e.info("Recording question interaction via RPC",{userId:s,questionId:o,answeredCorrectly:t});try{const{data:n,error:i}=await r.rpc("record_question_interaction",{p_user_id:s,p_question_id:o,p_answered_correctly:t});if(i)throw e.error("Error recording question interaction via RPC",{error:i,userId:s,questionId:o,answeredCorrectly:t}),new Error(`RECORD_INTERACTION_ERROR: ${i.message}`);return e.success("Question interaction recorded successfully",{userId:s,questionId:o,answeredCorrectly:t,result:n}),n}catch(n){throw e.error("Exception in recordQuestionInteraction",{error:n.message,userId:s,questionId:o,answeredCorrectly:t}),n}}({userId:u,questionId:t,answeredCorrectly:i}).catch(r=>{e.warn("Failed to update user question history (non-critical)",{error:r.message,userId:u,questionId:t,isCorrect:i})}),e.success("Quiz response recorded successfully",{responseId:a.id,questionId:t,isCorrect:i,timeSpent:c}),a}catch(a){throw e.error("Exception in recordQuizResponse",{error:a.message,stack:a.stack,responseData:s}),a}}export{s as r};
